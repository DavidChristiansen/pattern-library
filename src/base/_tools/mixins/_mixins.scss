/*------------------------------------*\
    MIXINS
\*------------------------------------*/

$blocklink__outline-width: 0;




@mixin media-query($mq) {
    $breakpoint-found: false;

    // Loop through the list of breakpoints we’ve provided in our settings file.
    @each $breakpoint in $breakpoints {

        // Grab the alias and the condition from their respective locations in
        // the list.
        $alias:     nth($breakpoint, 1);
        $condition: nth($breakpoint, 2);

        // If the media query we’ve specified has an alias and a condition...
        @if $mq == $alias and $condition {
            // ...tell the mixin that we’ve found it...
            $breakpoint-found: true;

            // ...and spit it out here.
            @media #{$condition} {
                @content;
            }
        }
    }

    // If the user specifies a non-exitent alias, send them a warning.
    @if $breakpoint-found == false{
        @warn "Oops! Breakpoint ‘#{$mq}’ does not exist."
    }
}

@mixin chevron($orientation: down, $size: 1em) {
    content: '';
    display: inline-block;
    height: $size;
    transition: transform 0.2s, top 0.2s;
    width: $size;

    background-image: url(#{$iconsfile}#chevron-#{$orientation});

    @supports (-webkit-mask-image: url()) or (mask-image: url()) {
        background-color: currentColor;
        background-image: none;
        -webkit-mask-image: url(#{$iconsfile}#chevron-#{$orientation});
        mask-image: url(#{$iconsfile}#chevron-#{$orientation});
    }
}

/**
 * Mixin to enforce consistency on block-style links, e.g. search results,
 * category items, etc
 */
@mixin blocklink ($link-selector: null, $display: block) {
    display: $display;
    position: relative;
    transition: background-color $transition-out-time, outline-color $transition-out-time;
    z-index: 1;

    outline: 0 !important;

    &:focus {
        background-color: $colour__blocklink-bg--focus;
        box-shadow: inset #{$blocklink__outline-width * -1} #{$blocklink__outline-width + $link__border-width * -1} $colour__link--focus__shadow, inset $blocklink__outline-width #{$blocklink__outline-width + $link__border-width * -1} $colour__link--focus__shadow;
    }

    &:hover:not(:focus) {
        background-color: $colour__blocklink-bg--hover;
    }

    @if $link-selector {
        &:hover:not(:focus) {
            background: transparent;
        }

        #{$link-selector} {
            &::after {
                content: "";
                height: 100%;
                left: 0px;
                position: absolute;
                top: 0px;
                width: 100%;
                z-index: 0;

                transition: background-color $transition-in-time;
            }

            &:focus {
                &::after {
                    transition-duration: 0s;
                }
            }

            &:focus:hover {
                text-decoration: none;
            }
        }

        // apply the background colour in browsers that support blend modes, so we don't obscure the text
        @supports(mix-blend-mode: darken) {
            #{$link-selector} {
                outline: 0;

                &::after {
                    mix-blend-mode: darken;
                }

                &:hover {
                    &::after {
                        background-color: $colour__blocklink-bg--hover;
                    }
                }

                &:focus {
                    background-color: transparent;
                    box-shadow: none;
                    text-decoration: underline;
                }

                &:focus {
                    &::after {
                        background-color: $colour__blocklink-bg--focus;
                        box-shadow: inset #{$blocklink__outline-width * -1} #{$blocklink__outline-width + $link__border-width * -1} $colour__link--focus__shadow, inset $blocklink__outline-width #{$blocklink__outline-width + $link__border-width * -1} $colour__link--focus__shadow;
                    }
                }

                &:focus:hover {
                    text-decoration: underline;
                }
            }
        }
    }
}

/**
 * blocklink variant
 */
@mixin blocklink--solid($link-selector: null) {
    @include blocklink($link-selector);

    background-color: $colour__white;
}

/**
 * Animated underscore used on logo images
 */
@mixin fancy-underscore($width: 1px) {
    position: relative;
    transition-duration: 0s !important;

    &:hover:not(:focus) {
        background: transparent;
        outline-color: transparent;
    }

    &::after {
        background-color: currentColor;
        bottom: -5px;
        content: '';
        height: $width;
        left: 50%;
        opacity: 0;
        position: absolute;
        right: 50%;
        transition: left $transition-in-time, right $transition-in-time, opacity $transition-in-time;
    }

    &:hover::after {
        left: 0;
        opacity: 1;
        right: 0;
    }
}

/**
 * Mixin to enforce consistent margins on "block" elements, e.g. blockquotes,
 * info notes, accordions, etc
 */
@mixin block-margins {
    margin-top: 32px;
    margin-bottom: 32px;
}

@mixin block-margins--bottom {
    margin-bottom: 32px;
}

@mixin box-shadow {
    box-shadow: 1px 1px 4px rgba(0, 0, 0, 0.15);
}

/**
 * Mixin to enforce consistent open/close icons,
 * mobile section nav, accordions, etc
 */
@mixin indicator {
    @include chevron(down);
    // color: currentColor;
    right: 21px;
    position: absolute;
}

@mixin indicator--open {
    transform: rotateZ(180deg);
}

@mixin visually-hidden {
    clip: rect(1px 1px 1px 1px); /* IE6, IE7 */
    clip: rect(1px, 1px, 1px, 1px);
    height: 1px; width: 1px;
    overflow: hidden;
    position: absolute !important;
}

@mixin colwidth($columns: 1, $total: 12, $gutter: $grid-gap-x) {
    width: calc(100% * #{$columns/$total} - #{$gutter});
}

@mixin colpush($columns: 1, $total: 12) {
    margin-left: calc(100% * #{$columns/$total});
}

@mixin colpull($columns: 1, $total: 12) {
    margin-left: calc(100% * #{$columns/$total} * -1);
}

@mixin layout($gutter: $grid-gap-x) {
    margin-right: #{$gutter * -1};
    overflow: hidden;

    > *[class] {
        margin-right: $gutter;
    }

    @supports (display: grid) {
        display: grid;
        grid-gap: 0 $gutter;
        margin-right: 0;
        overflow: visible;

        > *[class] {
            margin-left: 0;
            margin-right: 0;
            width: auto;
        }
    }
}
